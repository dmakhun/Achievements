package com.softserve.edu.manager;

import junitparams.JUnitParamsRunner;
import static junitparams.JUnitParamsRunner.*;
import junitparams.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.softserve.edu.dao.AchievementDao;
import com.softserve.edu.dao.AchievementTypeDao;
import com.softserve.edu.dao.UserDao;
import com.softserve.edu.entity.Achievement;
import com.softserve.edu.exception.InvalidValueException;

@RunWith(JUnitParamsRunner.class)
public class AchievementManagerImplTest2 {

	@Mock
	private AchievementDao achievementDao;
	@Mock
	private AchievementTypeDao achievementTypeDao;
	@Mock
	private Achievement achievement;
	@Mock
	private UserDao userDao;

	@InjectMocks
	private AchievementManager achievementManager = new AchievementManagerImplementation();

	@Before
	public void setUp() throws Exception {
		MockitoAnnotations.initMocks(this);
	}

	@Test(expected = IllegalArgumentException.class)
	@Parameters({ "-2, 3, 'comment' " })
	public void testGiveAwardToUserNegUserID(long userID,
			long achievementTypeId, String comment) {
		achievementManager.giveAwardToUser(userID, achievementTypeId, comment);
	}

	@Test(expected = IllegalArgumentException.class)
	@Parameters({ "3, -5, 'comment' " })
	public void testGiveAwardToUserNegAchievementTypeID(long userID,
			long achievementTypeId, String comment) {
		achievementManager.giveAwardToUser(userID, achievementTypeId, comment);
	}

	@Test(expected = InvalidValueException.class)
	public void testTakeAwardBackFromUser() throws InvalidValueException {
		achievementManager.takeAwardBackFromUser(3l);
	}

	@Test
	public void testUserAchievements() {
		achievementManager.userAchievements(0l);
	}

}