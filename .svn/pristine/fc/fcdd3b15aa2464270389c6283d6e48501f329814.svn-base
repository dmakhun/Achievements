package com.softserve.edu.manager;

import static org.junit.Assert.fail;

import java.security.NoSuchAlgorithmException;

import org.junit.Before;
import org.junit.Test;

import com.softserve.edu.entity.User;
import com.softserve.edu.exception.InvalidValueException;

public class UserManagerImplTest {

    @Before
    public void setUp() throws Exception {
    }

    /**
     * Lots of versions that method of user adding can take.
     */
    @Test
    public void testAdd() {
        UserManager userManager = new UserManagerImplementation();

        try {
            userManager.create(null, null, null, null, null, null);
            fail("One shouldn't be able to add anything null but roleId.");
        } catch (InvalidValueException e) {
        }

        try {
            userManager.create("", "", "", "", "", null);
            fail("Empty strings should not pass here. Fix that.");
        } catch (InvalidValueException e) {
        }

        try {
            userManager
                    .create("slfkjdslkfjdslkfjsdlkfjsldkjflsdkjflsdkjflsdkjfldskjflsdkjfsldkjflsdk",
                            "", "", "", "", null);
            fail("Last time max length was 50 chars. Old test?");
        } catch (InvalidValueException e) {
        }

        try {
            userManager.create("Name", "Surname", "u", "password", "email", null);
            fail("Username should fail here, not enough length");
        } catch (InvalidValueException e) {
        }

        try {
            userManager.create("Name", "Surname", "u$$ern3m#", "password",
                    "email", null);
            fail("Username should fail here. Forbidden characters");
        } catch (InvalidValueException e) {
        }

        try {
            userManager.create("Name", "Surname", "someUserName", "password",
                    "email", null);
            fail("email check should fail here. not an email pattern");
        } catch (InvalidValueException e) {
        }

        try {
            userManager.create("Name", "Surname", "someUserName", "password",
                    "email@email", null);
            fail("that's a bad email pattern too, fix");
        } catch (InvalidValueException e) {
        }

        try {
            userManager.create("Name", "Surname", "someUserName", "password",
                    "email@email.email", -3l);
            fail("Role id should fail as nonexistent");
        } catch (InvalidValueException e) {
        }
    }

    /**
     * Lots of versions that method of user modifying can take.
     */
    @Test
    public void testModify() {
        UserManager userManager = new UserManagerImplementation();
        User testoniniOne = null;
        User testoniniTwo = null;

        try {
            testoniniOne = userManager.create("Name", "Surname", "TestoniniOne",
                    "pass", "e@mail.com", null);
            testoniniTwo = userManager.create("Name", "Surname", "TestoniniTwo",
                    "pass", "e2@mail.com", null);
        } catch (InvalidValueException e) {
            System.err.println(e.getMessage());
            fail("Could not add testing users");
        }

        try {
            userManager.update(testoniniOne.getId(), "", "", "", "", "", null);
        } catch (InvalidValueException e) {
            fail("Yep, that should be a valid test and it failed.");
        }

        try {
            userManager
                    .update(testoniniOne.getId(),
                            "sldfjsdlkfjsdl;fkjsdfdsfsfsdsda;lfkjsd;flkjsd;lfkjds;lfkjsda;lfkjsd;lfkj",
                            "", "", "", "", null);
            fail("Test should fail because of name length.");
        } catch (InvalidValueException e) {
        }

        try {
            userManager.update(testoniniOne.getId(), "name", "surname",
                    "TestoniniOne", "", "", null);
        } catch (InvalidValueException e) {
            fail("Such input should not fail because nothing changed.");
        }

        try {
            userManager.update(testoniniOne.getId(), "name", "surname",
                    "TestoniniTwo", "", "", null);
            fail("Test should fail because of duplicate username.");
        } catch (InvalidValueException e) {
        }

        try {
            userManager.update(testoniniOne.getId(), "name", "surname", "", "",
                    "e2@mail.com", null);
            fail("Test should fail because of duplicate email.");
        } catch (InvalidValueException e) {
        }
    }

    @Test
    public void testAuthorize() {
        UserManager userManager = new UserManagerImplementation();

        User testoniniOne = null;
        try {
            testoniniOne = userManager.create("Name", "Surname", "TestoniniOne",
                    "pass", "e@mail.com", null);
        } catch (InvalidValueException e) {
        }

        User auth = userManager.authorize(testoniniOne.getId(),
                testoniniOne.getPassword());
        
        if (auth.getId() != testoniniOne.getId()) {
            fail("Authorization failed.");
        }
        
        auth = userManager.authorize(testoniniOne.getId(), "nonexistent hash");
        if (auth != null) {
            fail("false authorization");
        }
    }
}
