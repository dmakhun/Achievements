package com.softserve.edu.dao;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.softserve.edu.entity.AchievementType;
import com.softserve.edu.entity.Competence;
import com.softserve.edu.entity.Group;
import com.softserve.edu.entity.Right;
import com.softserve.edu.entity.User;

@Repository("userDao")
public class UserDaoImplementation extends GenericDaoImplementation<User>
		implements UserDao {

	@Autowired
	RoleDao roleDao;
	@Autowired
	CompetenceDao competenceDao;

	public UserDaoImplementation() {
		super(User.class);
	}

	/**
	 * {@inheritDoc}
	 */
	public void attendUserToCompetence(Long userId, Long competenceId) {
		User user = (User) entityManager.find(User.class, userId);
		Competence competence = (Competence) entityManager.find(
				Competence.class, competenceId);

		if (competence == null) {
			return;
		}

		user.getCompetences().add(competence);

	}
	
	@Override
	public void attendUserToCompetence(User user, Competence competence){
		user.getCompetences().add(competence);
	}

	

	@Override
	public void removeUserToCompetence(User user,
			Competence competence) {

		user.getCompetences().remove(competence);
		competence.getUsers().remove(user);

	}

	/*
	 * Get all user's achievements. Author Volodymyr.
	 */
	@SuppressWarnings("unchecked")
	public List<AchievementType> getUserAchievementList(long id) {

		List<AchievementType> achievementList = new ArrayList<AchievementType>();

		achievementList = entityManager
				.createQuery(
						"from AchievementType at INNER JOIN fetch at.achievement a "
								+ "INNER JOIN fetch a.user u WHERE u.id = :userID")
				.setParameter("userID", id).getResultList();

		return achievementList;

	}



	/**
	 * {@inheritDoc}
	 * 
	 * @author vkudrtc
	 */
	@Override
	public User findByUsername(String username) {

		try {
			if (username == null || username.isEmpty()) {
				return null;
			}

			String query="from User where username like ?1";
			return this.findSingleEntity(query, username);

		} catch (Exception e) {
			return null;
		}
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @author vkudrtc
	 */
	@Override
	public User findByEmail(String email) {

		try {
			if (email == null || email.isEmpty()) {
				return null;
			}
			
			String query="from User where email like ?1";
			return this.findSingleEntity(query, email);
					
		} catch (Exception e) {
			return null;
		}
	}


	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<Group> findGroups(Long userId, boolean onlyOpened) {

		String closed = "";
		if (onlyOpened) {
			Date date = new Date();
			SimpleDateFormat formatter = new SimpleDateFormat("YYYY-MM-DD");
			closed = "and closed >" + formatter.format(date);
		}
		List<Group> list = entityManager
				.createQuery(
						"from Group g inner join fetch g.users u where u.id = :id "
								+ closed).setParameter("id", userId)
				.getResultList();

		return list;
	}


	/**
	 * {@inheritDoc}
	 * 
	 */
	public Integer countManagers() {

		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<Long> criteriaQuery = criteriaBuilder
				.createQuery(Long.class);
		Root<User> root = criteriaQuery.from(User.class);
		criteriaQuery.select(criteriaBuilder.count(root));

		criteriaQuery.where(criteriaBuilder.equal(root.get("role"),
				roleDao.findRole("ROLE_MANAGER")));

		TypedQuery<Long> countQuery = entityManager.createQuery(criteriaQuery);
		int totalObjectsNumber = countQuery.getSingleResult().intValue();

		return totalObjectsNumber;
	}


	
}
