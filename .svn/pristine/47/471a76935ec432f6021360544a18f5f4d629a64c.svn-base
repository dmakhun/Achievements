package com.softserve.edu.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.softserve.edu.entity.Competence;
import com.softserve.edu.entity.Group;
import com.softserve.edu.entity.User;
import com.softserve.edu.manager.CompetenceManager;
import com.softserve.edu.manager.GroupManager;
import com.softserve.edu.manager.UserManager;

@Controller
public class ManagerController {
	@Autowired
	GroupManager groupManager;
	@Autowired
	CompetenceManager competenceManager;
	@Autowired
	UserManager userManager;

	@RequestMapping(value = "/manager/groups", method = RequestMethod.GET)
	public String groups(
			@RequestParam(value = "status", required = false, defaultValue = "") String status,
			Model model) {

		List<Competence> competenceList = competenceManager.list();
		Map<String, List<Group>> groups = new HashMap<>();
		for (Competence competence : competenceList) {
			groups.put(competence.getName(),
					groupManager.findByCompetence(competence.getId(), true));
		}

		model.addAttribute("status", status);
		model.addAttribute("groups", groups);
		model.addAttribute("competences", competenceList);

		return "groups";
	}

	@RequestMapping(value = "/manager/groups", method = RequestMethod.POST)
	public String createGroup(
			@RequestParam(value = "group_name") String groupName,
			@RequestParam(value = "competence") Long competenceId,
			@RequestParam(value = "dateStart") String dateStart,
			@RequestParam(value = "dateEnd") String dateEnd)
			throws ParseException {

		try {
			Date starting = new SimpleDateFormat("yyyy-MM-dd").parse(dateStart);
			Date ending = new SimpleDateFormat("yyyy-MM-dd").parse(dateEnd);

			if (groupName.isEmpty()) {
				return "redirect:/manager/groups?status=name";
			}

			if (starting.after(ending)) {
				return "redirect:/manager/groups?status=inversed";
			}
			groupManager.create(groupName, starting, ending, competenceId);
		} catch (ParseException ex) {
			return "redirect:/manager/groups?status=date";
		} catch (IllegalArgumentException ex) {
			return "redirect:/manager/groups?status=competence";
		}

		return "redirect:/manager/groups";
	}

	@RequestMapping(value = "/manager/group/{id}", method = RequestMethod.GET)
	public String concreteGroup(@PathVariable(value = "id") Long groupId,
			Model model) {

		List<User> userList = groupManager.users(groupId);

		model.addAttribute("users", userList);

		return "userlist";
	}
	
	@RequestMapping(value = "/manager/group/delete/{id}", method = RequestMethod.GET)
	public String deleteGroup(@PathVariable(value = "id") Long groupId,
			Model model) {

		groupManager.deleteById(groupId);		

		return "redirect:/manager/groups";
	}
	
	@RequestMapping(value = "/manager/attendees", method = RequestMethod.GET)
	public String attendees(Model model) {

		List<Competence> competenceList = competenceManager.list();
		Map<String, List<Group>> groups = new HashMap<>();
		for (Competence competence : competenceList) {
			groups.put(competence.getName(),
					groupManager.findByCompetence(competence.getId(), true));
		}

		model.addAttribute("competences", competenceList);
		model.addAttribute("competence_groups", groups);

		return "attendees";
	}

	@RequestMapping(value = "/manager/attendees", method = RequestMethod.POST)
	public String attendUser(@RequestParam(value = "user_id") Long userId,
			@RequestParam(value = "group_id") Long groupId,
			@RequestParam(value = "competence_id") Long competenceId) {

		groupManager.addUser(userId, groupId);

		userManager.removeUserToCompetence(userId, competenceId);

		return "redirect:/manager/attendees";
	}

	@RequestMapping(value = "/admin/removeManager", method = RequestMethod.GET)
	public String removeManager(
			@RequestParam(value = "status", defaultValue = "", required = false) String status,
			Model model) {
		List<User> allUsers = userManager.list();
		List<User> managers = new ArrayList<User>();

		for (User user : allUsers) {
			if (user.getRole().getName().equals("ROLE_MANAGER")) {
				managers.add(user);
			}
		}
		model.addAttribute("userlist", managers);
		model.addAttribute("status", status);

		return "removeManager";
	}

	@RequestMapping(value = "/admin/addManager", method = RequestMethod.GET)
	public String addManager(
			@RequestParam(value = "status", defaultValue = "", required = false) String status,
			Model model) {
		model.addAttribute("status", status);
		return "addManager";
	}
}
