package com.softserve.edu.manager;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.softserve.edu.dao.AchievementTypeDao;
import com.softserve.edu.dao.CompetenceDao;
import com.softserve.edu.entity.AchievementType;
import com.softserve.edu.entity.Competence;
import com.softserve.edu.entity.Group;
import com.softserve.edu.exception.CompetenceManagerException;

@Service("competenceManager")
public class CompetenceManagerImplementation implements CompetenceManager {

	private static final Logger LOGGER = Logger
			.getLogger(CompetenceManagerImplementation.class);

	@Autowired
	CompetenceDao competenceDao;
	@Autowired
	AchievementTypeDao achievementTypeDao;

	@Override
	@Transactional
	public List<Group> findGroups(int CompetenceId) {
		return competenceDao.showGroups(CompetenceId);
	}

	@Override
	public List<Group> findGroupsByCompetenceUuid(String competenceUuid) {
		return competenceDao.findGroupsByCompetenceUuid(competenceUuid);
	}

	@Override
	@Transactional
	public List<Competence> list() {
		return competenceDao.listWithUsers();
	}

	@Override
	@Transactional
	public List<AchievementType> findTypesOfAchievements(Long idCompetence) {

		List<AchievementType> achievementTypes = achievementTypeDao
				.list(idCompetence);

		return achievementTypes;
	}

	@Override
	@Transactional
	public Competence create(String name) throws CompetenceManagerException {
		Competence competence;
		try {
			competence = new Competence();
			competence.setName(name);
			competenceDao.save(competence);
			LOGGER.info("Competence created successfully");
			return competence;
		} catch (Exception e) {
			LOGGER.error("Could not create competence", e);
			throw new CompetenceManagerException("Could not create competence",
					e);

		}
	}

	@Override
	@Transactional
	public boolean delete(Long id) throws CompetenceManagerException {
		boolean status;
		Competence competence = competenceDao.findById(id);
		if (competence == null) {
			LOGGER.error("Competence with such ID does not exist");
			throw new CompetenceManagerException("Competence with such ID does not exist");
		}
		try {
			status = competenceDao.delete(competence);
			LOGGER.info("Competence removed successfully");
			return status;
		} catch (Exception e) {
			LOGGER.error("Could not delete competence", e);
			throw new CompetenceManagerException("Could not delete competence", e);
		}
	}

	
	@Override
	@Transactional
	public boolean deleteByUuid(String uuid) throws CompetenceManagerException {
		boolean status;
		Competence competence = competenceDao.findByUuid(uuid);
		if (competence == null) {
			LOGGER.error("Competence with such UUID does not exist");
			throw new CompetenceManagerException("Competence with such UUID does not exist");
		}
		try {
			status = competenceDao.delete(competence);
			LOGGER.info("Competence removed successfully");
			return status;
		} catch (Exception e) {
			LOGGER.error("Could not delete competence", e);
			throw new CompetenceManagerException("Could not delete competence", e);
		}
	}

	
	@Override
	@Transactional
	public List<Competence> listWithout(List<Competence> buts) {
		Set<Competence> but = new HashSet<>();
		but.addAll(buts);
		Set<Competence> set = new HashSet<>();
		set.addAll(competenceDao.findAll());
		set.removeAll(but);
		return new ArrayList<>(set);
	}

	
	@Override
	@Transactional
	public List<Competence> findByUser(Long userId) {
		return competenceDao.findByUser(userId);
	}

	
	@Override
	@Transactional
	public List<Competence> findByUserUuid(String userUuid) {
		return competenceDao.findByUserUuid(userUuid);
	}

	@Override
	@Transactional
	public Competence findByID(Long objectId) {
		return competenceDao.findById(objectId);
	}

	@Override
	public List<AchievementType> findAchievementTypesByCompetenceUuid(
			String conpetenceUuid) {

		List<AchievementType> achievementTypes = achievementTypeDao
				.getAchievementTypesByCompetenceUuid(conpetenceUuid);

		return achievementTypes;
	}
@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime
				* result
				+ ((achievementTypeDao == null) ? 0 : achievementTypeDao
						.hashCode());
		result = prime * result
				+ ((competenceDao == null) ? 0 : competenceDao.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CompetenceManagerImplementation other = (CompetenceManagerImplementation) obj;
		if (achievementTypeDao == null) {
			if (other.achievementTypeDao != null)
				return false;
		} else if (!achievementTypeDao.equals(other.achievementTypeDao))
			return false;
		if (competenceDao == null) {
			if (other.competenceDao != null)
				return false;
		} else if (!competenceDao.equals(other.competenceDao))
			return false;
		return true;
	}
}
