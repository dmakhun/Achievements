package com.softserve.edu.dao;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.persistence.NoResultException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.softserve.edu.entity.Group;
import com.softserve.edu.entity.User;

@Repository("groupDao")
public class GroupDaoImplementation extends GenericDaoImplementation<Group>
		implements GroupDao {

	@Autowired
	UserDao userDao;

	public GroupDaoImplementation() {
		super(Group.class);
	}

	/**
	 * @author MyronKurus
	 */
	@SuppressWarnings("null")
	public List<Group> openedGroups(Date dt) {

		List<Group> res = null;

		@SuppressWarnings("unchecked")
		List<Group> groups = entityManager.createQuery("FROM Group")
				.getResultList();
		for (Group gr : groups) {
			if (gr.getOpened().before(dt) && gr.getClosed().after(dt)) {
				res.add(gr);
			}
		}
		return res;
	}

	/**
	 * {@inheritDoc}
	 * 
	 */
	@SuppressWarnings("unchecked")
	public List<Group> inFuture() {

		Date today = new Date();
		List<Group> futureGroup = entityManager
				.createQuery("from Group where opened > :today")
				.setParameter("today", today).getResultList();

		return futureGroup;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<Group> inFuture(Long competenceId) {

		Date date = new Date();

		@SuppressWarnings("unchecked")
		List<Group> list = entityManager
				.createQuery(
						"from Group where opened > :date and competence_id = :cid")
				.setParameter("date", date).setParameter("cid", competenceId)
				.getResultList();

		return list;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Group> findByCompetence(Long competenceId, boolean onlyOpened) {

		String closed = "";
		if (onlyOpened) {
			Date date = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY-MM-DD");
			closed = "and closed >" + dateFormat.format(date);
		}
		@SuppressWarnings("unchecked")
		List<Group> list = entityManager
				.createQuery("from Group where competence_id = :cid " + closed)
				.setParameter("cid", competenceId).getResultList();

		return list;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Group> findByCompetenceUuid(String competenceUuid,
			boolean onlyOpened) {

		String closed = "";
		if (onlyOpened) {
			Date date = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY-MM-DD");
			closed = "and closed >" + dateFormat.format(date);
		}
		@SuppressWarnings("unchecked")
		List<Group> list = entityManager
				.createQuery(
						"from Group g INNER JOIN fetch g.competence c WHERE c.uuid = :cuuid "
								+ closed).setParameter("cuuid", competenceUuid)
				.getResultList();
		return list;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void addUser(Long userId, Long groupId) {

		User user = (User) entityManager.find(User.class, userId);
		Group group = (Group) entityManager.find(Group.class, groupId);

		group.getUsers().add(user);

	}

	// UUID
	@Override
	public void addUser(String userUuid, String groupUuid) {
		String queryU = "from User u WHERE u.uuid = ?1";
		User user = userDao.findSingleEntity(queryU, userUuid);
		String queryG = "from Group g WHERE g.uuid = ?1";
		Group group = this.findSingleEntity(queryG, groupUuid);
		
		// User user = (User) entityManager
		// .createQuery("from User u WHERE u.uuid = :uuid")
		// .setParameter("uuid", userUuid).getSingleResult();		
		// Group group = (Group) entityManager
		// .createQuery("from Group g WHERE g.uuid = :uuid")
		// .setParameter("uuid", groupUuid).getSingleResult();

		group.getUsers().add(user);
	}

	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<User> userList(Long groupId) {

		List<User> users =

		(List<User>) entityManager
				.createQuery(
						"select user from User user inner join user.groups ach_group  where ach_group.id = :groupId")
				.setParameter("groupId", (long) groupId).getResultList();

		return users;
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<User> findUsersByGroupUuid(String groupUuid) {

		List<User> users = (List<User>) entityManager
				.createQuery(
						"from User u INNER JOIN fetch u.groups g where g.uuid = :groupUuid")
				.setParameter("groupUuid", groupUuid).getResultList();

		for (User u : users) {
			System.out.println(u.getId());
		}
		return users;
	}

	@Override
	public Group getGroupByName(String name) {
		String query="from Group where name like ?1";
		return	this.findSingleEntity(query, name);
		
//		try {
//			Group group = (Group) entityManager
//					.createQuery("from Group where name like :groupname")
//					.setParameter("groupname", name).getSingleResult();
//			return group;
//		} catch (NoResultException e) {
//			return null;
//		}
	}
}
