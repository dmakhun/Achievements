package com.softserve.edu.rest;

import java.util.List;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.softserve.edu.entity.AchievementType;
import com.softserve.edu.entity.Competence;
import com.softserve.edu.entity.Group;
import com.softserve.edu.exception.CompetenceManagerException;
import com.softserve.edu.manager.CompetenceManager;
import com.softserve.edu.manager.GroupManager;

@Component
@Path("/competence")
public class CompetenceRest {
	@Autowired
	CompetenceManager competenceManager;
	@Autowired
	GroupManager groupManager;

	/**
	 * Finds all OPENED groups for specific competence
	 * http://localhost:8080/Achievements
	 * /rest/competence/findGroupsOpenedByCompetence/UUID
	 * 
	 * @param competenceUuid
	 * @return
	 */
	@GET
	@Produces(MediaType.APPLICATION_XML)
	@Path("/findGroupsOpenedByCompetence/{competenceUuid}")
	public Response findOpenedGroupsByCompetenceUuid(
			@PathParam("competenceUuid") final String competenceUuid) {
		List<Group> listOpenedGroupsByCompetence = groupManager
				.findByCompetenceUuid(competenceUuid, true);
		JaxbList<Group> jaxbList = new JaxbList<Group>(
				listOpenedGroupsByCompetence);
		return Response.ok(jaxbList).build();
	}

	/**
	 * This method returns marshaled list of groups of some specific competence
	 * http://localhost:8080/Achievements/rest/competence/
	 * findGroupsByCompetenceUuid/SOME_COMPETENCE_UUID
	 * 
	 * @param id
	 *            some specific id of the competence
	 * @return xml representation of the list of groups
	 */
	@Path("findGroupsByCompetenceUuid/{competenceUuid}")
	@GET
	@Produces(MediaType.APPLICATION_XML)
	public Response findAllGroupsByCompetenceUuid(
			@PathParam("competenceUuid") final String competenceUuid) {

		List<Group> groups = competenceManager
				.findGroupsByCompetenceUuid(competenceUuid);

		return Response.ok(new JaxbList<Group>(groups)).build();
	}

	/**
	 * This method returns all competences of the project
	 * http://localhost:8080/Achievements/rest/competence/findAllCompetences
	 * 
	 * @return xml representation of all existing competences
	 */
	@Path("findAllCompetences")
	@GET
	@Produces(MediaType.APPLICATION_XML)
	public Response findAllCompetences() {
		List<Competence> competences = competenceManager.list();
		return Response.ok(new JaxbList<Competence>(competences)).build();
	}

	/**
	 * This method returns all achievement types of some specific competence
	 * http://localhost:8080/Achievements/rest/competence/
	 * findAchievementTypesByComptenceUuid/SOME_COMPETENCE_UUID
	 * 
	 * @param id
	 *            specific competence id
	 * @return xml representation of all achievement types of some competence
	 */
	@Path("findAchievementTypesByComptenceUuid/{competenceuuid}")
	@GET
	@Produces(MediaType.APPLICATION_XML)
	public Response findAllAchievementTypeByCompetenceUuid(
			@PathParam("competenceuuid") final String competenceUuid) {
		List<AchievementType> achievementTypes = competenceManager
				.getAchievementTypesByCompetenceUuid(competenceUuid);
		return Response.ok(new JaxbList<AchievementType>(achievementTypes))
				.build();
	}

	/**
	 * This method returns all competences of some specific user
	 * http://localhost
	 * :8080/Achievements/rest/competence/findCompetencesByUserUuid
	 * /SOME_USER_UUID
	 * 
	 * @param userId
	 *            specific user id
	 * @return xml representation of the competences of some user
	 */
	@Path("/findCompetencesByUserUuid/{userUuid}")
	@GET
	@Produces(MediaType.APPLICATION_XML)
	public Response findCompetencesByUserId(
			@PathParam("userUuid") final String userUuid) {
		List<Competence> competences = competenceManager
				.findByUserUuid(userUuid);
		return Response.ok(new JaxbList<Competence>(competences)).build();
	}

	/**
	 * Creates new competence with the name specified in URL
	 * 
	 * @param name
	 * @return
	 */
	@Path("createCompetence/{name}")
	@POST
	public Response createCompetence(@PathParam("name") final String name) {
		try {
			competenceManager.create(name);
		} catch (CompetenceManagerException e) {
			return Response.status(500).entity(e.getMessage()).build();
		}
		return Response.status(201).build();
	}

	/**
	 * Deletes competence by its uuid
	 * 
	 * @param uuid
	 * @return
	 */
	@DELETE
	@Path("/remove/{uuid}")
	public Response deleteCompetencesByUuid(@PathParam("uuid") final String uuid) {
		try {
			competenceManager.deleteByUuid(uuid);
		} catch (CompetenceManagerException e) {
			return Response.status(500).entity(e.getMessage()).build();
		}
		return Response.status(200).entity("Competence was removed").build();
	}
}
