package com.softserve.edu.dao;

import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;

import com.softserve.edu.entity.AchievementType;

@Repository("achievementTypeDao")
public class AchievementTypeDaoImplementation extends
		GenericDaoImplementation<AchievementType> implements AchievementTypeDao {

	public AchievementTypeDaoImplementation() {
		super(AchievementType.class);
	}

	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<AchievementType> list(Long idCompetence) {

		List<AchievementType> list = entityManager
				.createQuery("from AchievementType where competence_id = :cid")
				.setParameter("cid", idCompetence).getResultList();

		return list;
	}

	// UUID
	@SuppressWarnings("unchecked")
	@Override
	public List<AchievementType> getAchievementTypesByCompetenceUuid(
			String conpetenceUuid) {

		List<AchievementType> list = entityManager
				.createQuery(
						"from AchievementType at INNER JOIN fetch at.competence c WHERE c.uuid = :cuuid")
				.setParameter("cuuid", conpetenceUuid).getResultList();
		return list;
	}
	public List<AchievementType> dynamicSearch(String name, int startPosition,
			int maxResult) {
		
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<AchievementType> criteriaQuery = criteriaBuilder
				.createQuery(AchievementType.class);
		Root<AchievementType> root = criteriaQuery.from(AchievementType.class);
		criteriaQuery.select(root);
		criteriaQuery.where(criteriaBuilder.like(root.<String> get("name"),
				name + "%"));
		TypedQuery typedQuery = entityManager.createQuery(criteriaQuery);
		typedQuery.setFirstResult(startPosition);
		typedQuery.setMaxResults(maxResult);
		List<AchievementType> achievementTypes = typedQuery.getResultList();
		return achievementTypes;
		
	}
/**
	 * {@inheritDoc}
	 */
	@Override
	public void deleteByUuid(String uuid) {
		entityManager.createQuery("delete from AchievementType WHERE uuid like :uuid")
	    .setParameter("uuid", uuid).executeUpdate();
	}
}
