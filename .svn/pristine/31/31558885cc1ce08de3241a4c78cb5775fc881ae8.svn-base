package com.softserve.edu.entity;

import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import org.hibernate.validator.constraints.NotBlank;
import com.softserve.edu.validation.ValidEmail;


/**
 * Represents bean class for User entity. Mapped on table USERS.
 * 
 * @author Edgar
 * 
 */
@XmlRootElement
@Entity
@Table(name = "ach_User")
public class User {

	/**
	 * Id field. It's PK and must be generated value. Mapped on column id.
	 */
	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;

	/**
	 * Many to one connection with role_id table.
	 */

	@ManyToOne
	@JoinColumn(name = "role_id")
	private Role role;

	/*@NotBlank(groups={PersistenceValidationGroup.class, FormValidationGroup.class})
	@Size(min=8, max=60, groups={PersistenceValidationGroup.class, FormValidationGroup.class})*/
	@Column(name = "name", length = 50)
	private String name;

	/**
	 * surname field. Mapped on column surname.
	 */
	/*@NotBlank(groups={PersistenceValidationGroup.class, FormValidationGroup.class})
	@Size(min=8, max=60, groups={PersistenceValidationGroup.class, FormValidationGroup.class})*/
	@Column(name = "surname", length = 50)
	private String surname;

	/**
	 * Login field. . Mapped on column username.
	 */
	/*@NotBlank(groups={PersistenceValidationGroup.class, FormValidationGroup.class})
	@Size(min=4, max=15, groups={PersistenceValidationGroup.class, FormValidationGroup.class})
	@Pattern(regexp="^\\w{8,}$", groups={PersistenceValidationGroup.class, FormValidationGroup.class})
	@Id*/
	@Column(name = "username", length = 50, unique=true)
	private String username;

	/**
	 * Password field. Mapped on column password.
	 */
	/*@NotBlank(groups={PersistenceValidationGroup.class, FormValidationGroup.class})
	@Pattern(regexp="^\\S+$", groups={PersistenceValidationGroup.class, FormValidationGroup.class})
	@Size(min=4, max=15, groups={FormValidationGroup.class})*/
	@Column(name = "password", length = 100)
	private String password;
	
	/*@ValidEmail(groups={PersistenceValidationGroup.class, FormValidationGroup.class})*/
	@Column(name = "email", length = 255, nullable = false, unique = true)
	private String email;

	/**
	 * salt field. Mapped on column salt.
	 */

	@Column(name = "salt", length = 100)
	private String salt;

	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "ach_UserToRight", joinColumns = { @JoinColumn(name = "user_id") }, inverseJoinColumns = { @JoinColumn(name = "right_id") })
	private Set<Right> rights;

	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "ach_UserToCompetence", joinColumns = { @JoinColumn(name = "user_id") }, inverseJoinColumns = { @JoinColumn(name = "competence_id") })
	private Set<Competence> competences;

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	private Set<Achievement> achievements;

	/**
	 * Many to many and create table user_group
	 */
	@ManyToMany(cascade = { CascadeType.ALL })
	@JoinTable(name = "ach_UserToGroup", joinColumns = { @JoinColumn(name = "user_id") }, inverseJoinColumns = { @JoinColumn(name = "group_id") })
	private Set<Group> groups;

	public User() {
	}

	public User(String name, String surname, String username, String password,
			String salt, Role role) {
		this.name = name;
		this.surname = surname;
		this.username = username;
		this.password = password;
		this.salt = salt;
		this.role = role;
	}

	/**
	 * Default constructor.
	 */

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Role getRole() {
		return role;
	}

	public void setRole(Role role) {
		this.role = role;
	}
	
	//@NameGetter
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSurname() {
		return surname;
	}

	public void setSurname(String surname) {
		this.surname = surname;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getSalt() {
		return salt;
	}

	public void setSalt(String salt) {
		this.salt = salt;
	}
	
	public String getEmail() {
	    return email;
	}
	
	public void setEmail(String email) {
	    this.email = email;
	}
	@XmlTransient
	public Set<Right> getRights() {
		return rights;
	}
	
	public void setRights(Set<Right> rights) {
		this.rights = rights;
	}
	@XmlTransient
	public Set<Competence> getCompetences() {
		return competences;
	}

	public void setCompetences(Set<Competence> competences) {
		this.competences = competences;
	}
	@XmlTransient
	public Set<Achievement> getAchievements() {
		return achievements;
	}

	public void setAchievements(Set<Achievement> achievements) {
		this.achievements = achievements;
	}
	@XmlTransient
	public Set<Group> getGroups() {
		return groups;
	}

	public void setGroups(Set<Group> groups) {
		this.groups = groups;
	}

	/**
	 * Parameterized constructor.
	 * 
	 * @param roles
	 *            value for roles field
	 * @param name
	 *            value for name field
	 * @param surname
	 *            value for surname field
	 * @param username
	 *            value for username field
	 * @param password
	 *            value for password field
	 * @param salt
	 *            value for salt field
	 */
	public User(String name, String surname, String username, Role role,
			String password, String salt) {
		super();
		this.role = role;
		this.name = name;
		this.surname = surname;
		this.username = username;
		this.password = password;
		this.salt = salt;

	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}
	
	
	

}
