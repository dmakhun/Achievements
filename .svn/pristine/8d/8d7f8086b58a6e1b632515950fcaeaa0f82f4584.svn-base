package com.softserve.edu.manager;

import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.softserve.edu.dao.AchievementTypeDao;
import com.softserve.edu.dao.CompetenceDao;
import com.softserve.edu.entity.AchievementType;
import com.softserve.edu.entity.Competence;
import com.softserve.edu.exception.AchievementTypeManagerException;
import com.softserve.edu.util.AngryThrower;

@Service("achievementTypeManager")
public class AchievementTypeManagerImplementation implements
		AchievementTypeManager {

	public static final Logger LOGGER = Logger
			.getLogger(AchievementTypeManagerImplementation.class);

	@Autowired
	CompetenceDao competenceDao;
	@Autowired
	AchievementTypeDao achievementTypeDao;

	/**
	 * {@inheritDoc}
	 * 
	 * @throws AchievementTypeManagerException
	 */
	@Transactional
	public AchievementType create(final String name, final int points,
			final long competenceId) throws AchievementTypeManagerException {

		Competence competence = competenceDao.getById(competenceId);
		if (competence == null) {
			LOGGER.error("Could not create achievement type. No competence with such ID");
			throw new AchievementTypeManagerException(
					"Could not create achievement type. No competence with such ID");
		}

		AchievementType achievementType;
		try {
			achievementType = new AchievementType().setName(name)
					.setPoints(points).setCompetence(competence);

			achievementTypeDao.save(achievementType);
		} catch (Exception e) {
			LOGGER.error("Could not create achievement type");
			throw new AchievementTypeManagerException(
					"Could not create achievement type", e);
		}

		LOGGER.info("Achievemnt type successfully created");
		return achievementType;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @throws AchievementTypeManagerException
	 */
	@Transactional
	public AchievementType create(final String name, final int points,
			final String competenceUuid) throws AchievementTypeManagerException {

		Competence competence = competenceDao.getByUuid(competenceUuid);
		if (competence == null) {
			LOGGER.error("Could not create achievement type. No competence with such UUID");
			throw new AchievementTypeManagerException(
					"Could not create achievement type. No competence with such UUID");
		}

		AchievementType achievementType;
		try {
			achievementType = new AchievementType().setName(name)
					.setPoints(points).setCompetence(competence);

			achievementTypeDao.save(achievementType);
		} catch (Exception e) {
			LOGGER.error("Could not create achievement type");
			throw new AchievementTypeManagerException(
					"Could not create achievement type", e);
		}
		LOGGER.info("Achievemnt type successfully created");
		return achievementType;
	}

	/**
	 * {@inheritDoc}
	 * @throws AchievementTypeManagerException 
	 */
	@Transactional
	public boolean deleteById(final long achievementTypeId) throws AchievementTypeManagerException {
		boolean status;
		AchievementType achievementType = achievementTypeDao
				.getById(achievementTypeId);
		if (achievementType == null) {
			LOGGER.error("Could not find achievement type with such ID");
			throw new AchievementTypeManagerException(
					"Could not find achievement type with such ID");
		}
		try {
			status = achievementTypeDao.delete(achievementType);
		} catch (Exception e) {
			LOGGER.error("Could not delete achievement type");
			throw new AchievementTypeManagerException(
					"Could not delete achievement type");
		}

		LOGGER.info("Achievemnt type successfully deleted");
		return status;

		
	}

	/**
	 * {@inheritDoc}
	 */
	@Transactional
	@Override
	public boolean deleteByUuid(final String uuid)
			throws AchievementTypeManagerException {
		boolean status;
		AchievementType achievementType = achievementTypeDao.getByUuid(uuid);
		if (achievementType == null) {
			LOGGER.error("Could not find achievement type with such UUID");
			throw new AchievementTypeManagerException(
					"Could not find achievement type with such UUID");
		}
		try {
			status = achievementTypeDao.delete(achievementType);
		} catch (Exception e) {
			LOGGER.error("Could not delete achievement type");
			throw new AchievementTypeManagerException(
					"Could not delete achievement type");
		}

		LOGGER.info("Achievemnt type successfully deleted");
		return status;

	}

	@Override
	@Transactional
	public List<AchievementType> achievementTypeList() {

		return achievementTypeDao.getAll();
	}

	@Override
	@Transactional
	public List<AchievementType> list(Long idCompetence) {
		return achievementTypeDao.list(idCompetence);
	}
}
