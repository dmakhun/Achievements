package com.softserve.edu.dao;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.springframework.stereotype.Repository;

import com.softserve.edu.entity.Group;
import com.softserve.edu.entity.User;
import com.softserve.edu.util.HibernateHelper;

@Repository("groupDao")
public class GroupDaoImplementation extends GenericDaoImplementation<Group>
		implements GroupDao {

	public GroupDaoImplementation() {
		super(Group.class);
	}

	/**
	 * @author MyronKurus
	 */
	@SuppressWarnings("null")
	public List<Group> openedGroups(Date dt) {

		List<Group> res = null;
		Session session = HibernateHelper.getSessionFactory().openSession();
		Transaction transaction = null;
		try {

			transaction = session.beginTransaction();
			@SuppressWarnings("unchecked")
			List<Group> groups = session.createQuery("FROM Group").list();
			transaction.commit();
			for (Group gr : groups) {
				if (gr.getOpened().before(dt) && gr.getClosed().after(dt)) {
					res.add(gr);
				}
			}
		} catch (HibernateException e) {
			transaction.rollback();
			e.printStackTrace();
		}
		return res;

	}

	/**
	 * {@inheritDoc}
	 * 
	 */
	@SuppressWarnings("unchecked")
	public List<Group> inFuture() {
		Session session = HibernateHelper.getSessionFactory().openSession();
		Date today = new Date();
		List<Group> futureGroup = session
				.createQuery("from Group where opened > :today")
				.setParameter("today", today).list();
		session.close();
		return futureGroup;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<Group> inFuture(Long competenceId) {
		Session session = HibernateHelper.getSessionFactory().openSession();

		Date date = new Date();
		@SuppressWarnings("unchecked")
		List<Group> list = session
				.createQuery(
						"from Group where opened > :date and competence_id = :cid")
				.setParameter("date", date).setParameter("cid", competenceId)
				.list();

		session.close();
		return list;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Group> findByCompetence(Long competenceId, boolean onlyOpened) {
		Session session = HibernateHelper.getSessionFactory().openSession();
		String closed = "";
		if (onlyOpened) {
			Date date = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY-MM-DD");
			closed = "and closed >" + dateFormat.format(date);
		}
		@SuppressWarnings("unchecked")
		List<Group> list = session
				.createQuery("from Group where competence_id = :cid " + closed)
				.setParameter("cid", competenceId).list();
		session.close();
		return list;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void addUser(Long userId, Long groupId) {
		Session session = HibernateHelper.getSessionFactory().openSession();

		User user = (User) session.get(User.class, userId);
		Group group = (Group) session.load(Group.class, groupId);

		group.getUsers().add(user);

		session.flush();
		session.close();
	}

	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<User> userList(Long groupId) {
		List<User> users = null;
		Session session = null;
		Transaction transaction = null;
		try {
			session = HibernateHelper.getSessionFactory().openSession();
			transaction = session.beginTransaction();
			users = (List<User>) session
					.createQuery(
							"select user from User user inner join user.groups ach_group  where ach_group.id = :groupId")
					.setParameter("groupId", (long) groupId).list();
			transaction.commit();
		} catch (HibernateException e) {
			transaction.rollback();
			e.printStackTrace();
		}

		return users;
	}

}
