package com.softserve.edu.dao;

import java.util.List;

import javax.persistence.NoResultException;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;

import com.softserve.edu.entity.Role;
import com.softserve.edu.entity.User;

@Repository("roleDao")
public class RoleDaoImplementation extends GenericDaoImplementation<Role>
		implements RoleDao {

	public RoleDaoImplementation() {
		super(Role.class);
	}

	public void set(User user, Role role) {
		user.setRole(role);
	}

	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<User> findUsers(int roleId) {

		List<User> userList = entityManager
				.createQuery("from User where role_id = :roleId")
				.setParameter("roleId", roleId).getResultList();

		return userList;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long findRole(String roleName) {

		try {
			long id = (long) entityManager
					.createQuery("select id from Role where name like :name")
					.setParameter("name", roleName).getSingleResult();
			return id;
		} catch (NoResultException e) {
			return null;
		}

	}
	/**
	 * {@inheritDoc}
	 */
	@Override
	public Role findRoleByRolename(String roleName) {
		try {
		Role role = (Role) entityManager.createQuery("from Role where name like :name")
				.setParameter("name", roleName).getSingleResult();
			return role;
		} catch (NoResultException e) {
			return null;
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<User> findUsersByRoleUuid(String roleUuid) {

		try {
			if (roleUuid == null || roleUuid.isEmpty()) {
				return null;
			}

			return (List<User>) entityManager
					.createQuery(
							"from User u INNER JOIN fetch u.role r WHERE r.uuid	like :uuid")
					.setParameter("uuid", roleUuid).getResultList();

		} catch (NoResultException e) {
			return null;
		}

	}
	
}
