package com.softserve.edu.manager;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.softserve.edu.dao.AchievementTypeDao;
import com.softserve.edu.dao.CompetenceDao;
import com.softserve.edu.entity.AchievementType;
import com.softserve.edu.entity.Competence;
import com.softserve.edu.entity.Group;
import com.softserve.edu.exception.CompetenceManagerException;

@Service("competenceManager")
public class CompetenceManagerImplementation implements CompetenceManager {

	private static final Logger LOGGER = Logger
			.getLogger(CompetenceManagerImplementation.class);

	@Autowired
	CompetenceDao competenceDao;
	@Autowired
	AchievementTypeDao achievementTypeDao;

	/**
	 * {@inheritDoc}
	 */
	@Transactional
	public List<Group> getGroups(int CompetenceId) {
		return competenceDao.showGroups(CompetenceId);
	}

	/**
	 * {@inheritDoc}
	 */
	public List<Group> findGroupsByCompetenceUuid(String competenceUuid) {
		return competenceDao.findGroupsByCompetenceUuid(competenceUuid);
	}

	/**
	 * {@inheritDoc}
	 */
	@Transactional
	public List<Competence> list() {

		return competenceDao.listWithUsers();
	}

	/**
	 * {@inheritDoc}
	 */
	@Transactional
	public List<AchievementType> getTypesOfAchievements(Long idCompetence) {

		List<AchievementType> achievementTypes = achievementTypeDao
				.list(idCompetence);

		return achievementTypes;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @throws CompetenceManagerException
	 */
	@Transactional
	public Competence create(String name) throws CompetenceManagerException {
		Competence competence;
		try {
			competence = new Competence();
			competence.setName(name);
			competenceDao.save(competence);
		} catch (Exception e) {
			LOGGER.error("Could not create competence", e);
			throw new CompetenceManagerException("Could not create competence",
					e);

		}
		LOGGER.info("Competence created successfully");
		return competence;
	}

	/**
	 * {@inheritDoc}
	 * @throws CompetenceManagerException 
	 */
	@Transactional
	public boolean delete(Long id) throws CompetenceManagerException {
		boolean status;
		Competence competence = competenceDao.getById(id);
		if (competence == null) {
			LOGGER.error("Competence with such ID does not exist");
			throw new CompetenceManagerException("Competence with such ID does not exist");
		}
		try {
			status = competenceDao.delete(competence);
		} catch (Exception e) {
			LOGGER.error("Could not delete competence", e);
			throw new CompetenceManagerException("Could not delete competence", e);
		}
		LOGGER.info("Competence removed successfully");
		return status;
	}

	/**
	 * {@inheritDoc}
	 * @throws CompetenceManagerException 
	 */
	@Transactional
	@Override
	public boolean deleteByUuid(String uuid) throws CompetenceManagerException {
		boolean status;
		Competence competence = competenceDao.getByUuid(uuid);
		if (competence == null) {
			LOGGER.error("Competence with such UUID does not exist");
			throw new CompetenceManagerException("Competence with such UUID does not exist");
		}
		try {
			status = competenceDao.delete(competence);
		} catch (Exception e) {
			LOGGER.error("Could not delete competence", e);
			throw new CompetenceManagerException("Could not delete competence", e);
		}
		LOGGER.info("Competence removed successfully");
		return status;
	}

	// FIXME
	// dont know if it works lol. before adding try/catch and throws it had comment "FIXME"
	@Transactional
	public boolean delete(String name) throws CompetenceManagerException {
		boolean status;
		Competence competence = competenceDao.findByName(name);
		if (competence == null) {
			LOGGER.error("Competence with such name does not exist");
			throw new  CompetenceManagerException("Competence with such name does not exist");
		}
		try {
			status = competenceDao.delete(competence);
		} catch (Exception e) {
			LOGGER.error("Could not delete competence", e);
			throw new  CompetenceManagerException("Could not delete competence", e);
		}
		LOGGER.info("Competence removed successfully");
		return status;
	}

	/**
	 * {@inheritDoc}
	 */
	@Transactional
	@Override
	public List<Competence> listWithout(List<Competence> buts) {

		Set<Competence> but = new HashSet<>();
		but.addAll(buts);

		Set<Competence> set = new HashSet<>();
		set.addAll(competenceDao.getAll());
		set.removeAll(but);
		return new ArrayList<>(set);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	@Transactional
	public List<Competence> findByUser(Long userId) {

		return competenceDao.findByUser(userId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	@Transactional
	public List<Competence> findByUserUuid(String userUuid) {

		return competenceDao.findByUserUuid(userUuid);
	}

	@Override
	@Transactional
	public Competence getByID(Long objectId) {
		return competenceDao.getById(objectId);
	}

	// UUID
	@Override
	public List<AchievementType> getAchievementTypesByCompetenceUuid(
			String conpetenceUuid) {

		List<AchievementType> achievementTypes = achievementTypeDao
				.getAchievementTypesByCompetenceUuid(conpetenceUuid);

		return achievementTypes;
	}
}
