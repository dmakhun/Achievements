package com.softserve.edu.rest;

import java.util.List;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.softserve.edu.entity.Group;
import com.softserve.edu.entity.User;
import com.softserve.edu.exception.InvalidValueException;
import com.softserve.edu.manager.UserManager;

@Component
@Path("/user")
public class UserRest {
	@Autowired
	private UserManager userManager;

	/*
	 * find all users from database. find by rest/user/allusers. listOfUsers is
	 * wrapped by special JaxbList object.
	 */
	@GET
	@Produces(MediaType.APPLICATION_XML)
	@Path("/allusers")
	public Response getListOfAllUsers() {

		List<User> list = userManager.list();
		JaxbList<User> listOfUsers = new JaxbList<User>(list);
		return Response.ok(listOfUsers).build();
	}

	/*
	 * find user by user id. find by rest/user/getuserbyid/{userid}.
	 */
	@GET
	@Produces(MediaType.APPLICATION_XML)
	@Path("/getuserbyid/{userid}")
	public Response getUserByUserId(@PathParam("userid") long userid) {
		User user = new User();
		user = userManager.findById(userid);
		return Response.ok(user).build();
	}

	/*
	 * find user by user email. find by rest/user/getuserbyemail/{email}.
	 */
	@GET
	@Produces(MediaType.APPLICATION_XML)
	@Path("/getuserbyemail/{email}")
	public Response getUserByemail(@PathParam("email") String email) {
		User user = new User();
		user = userManager.findByEmail(email);
		return Response.ok(user).build();
	}

	/*
	 * find all actual (non-closed to current date) user's groups if
	 * switcher=true. otherwise find all user's groups (include groups, closed
	 * to current date). find by rest/user/findgroups/{username}/{switcher}.
	 * {switcher} - boolean true or false. groupList is wrapped by special
	 * JaxbList object.
	 */
	@GET
	@Produces(MediaType.APPLICATION_XML)
	@Path("/getgroups/{username}/{switcher}")
	public Response getGroupsOfUser(@PathParam("username") String username,
			@PathParam("switcher") Boolean switcher) {
		List<Group> list = userManager.findGroups(userManager.findByUsername(username)
				.getId(), switcher);
		JaxbList<Group> groupList = new JaxbList<Group>(list);
		return Response.ok(groupList).build();
	}

	/*
	 * find user by username. find by rest/user/getuserbyusername/{username}.
	 */
	@GET
	@Produces(MediaType.APPLICATION_XML)
	@Path("/getuserbyusername/{username}")
	public Response getUsersByUsername(@PathParam("username") String username) {
		User user = new User();
		user = userManager.findByUsername(username);
		return Response.ok(user).build();
	}

	@DELETE
	@Path("/deleteuserbyuserid/{userid}")
	public Response deleteUserByUserId(@PathParam("userid") long userid) {
		userManager.deleteById(userid);
		return Response.status(200).entity("User was removed").build();
	}

	@POST
	@Path("/createuser/{name}/{surname}/{username}/{password}/{email}/{roleid}")
	public Response createUser(@PathParam("name") String name,
			@PathParam("surname") String surname,
			@PathParam("username") String username,
			@PathParam("password") String password,
			@PathParam("email") String email, @PathParam("roleid") long roleId) {

		try {
			userManager.create(name, surname, username, password, email, roleId);
		} catch (InvalidValueException e) {
			e.printStackTrace();
			return Response.status(400).build();
		}
		return Response.status(201).build();
	}

	@PUT
	@Path("/updateuser/{userid}/{name}/{surname}/{username}/{password}/{email}/{roleid}")
	public Response updateUser(@PathParam("userid") long userId,
			@PathParam("name") String name,
			@PathParam("surname") String surname,
			@PathParam("username") String username,
			@PathParam("password") String password,
			@PathParam("email") String email, @PathParam("roleid") long roleId) {
		try {
			userManager.update(userId, name, surname, username, password, email,
					roleId);
		} catch (InvalidValueException e) {
			e.printStackTrace();
			return Response.status(400).build();
		}
		return Response.status(200).build();
	}
	
	@PUT
	@Path("/attendcompetence/{userid}/{competenceid}")
	public Response attendCompetence(@PathParam("userid") long userId,
			@PathParam("competenceid") long competenceId){
		userManager.attendCompetence(userId, competenceId);
		return Response.status(200).build();
	}
	
	

}
