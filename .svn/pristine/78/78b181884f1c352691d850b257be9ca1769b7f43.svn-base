package com.softserve.edu.manager;

import static org.junit.Assert.*;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import com.softserve.edu.dao.AchievementTypeDao;
import com.softserve.edu.dao.CompetenceDao;
import com.softserve.edu.entity.AchievementType;
import com.softserve.edu.entity.Competence;
import com.softserve.edu.entity.Group;
import com.softserve.edu.exception.CompetenceManagerException;

@RunWith(MockitoJUnitRunner.class)
public class CompetenceManagerImplTest {

	@Mock CompetenceDao competenceDao;
	@Mock AchievementTypeDao achievementTypeDao;
	
	@InjectMocks CompetenceManager competenceManager = new CompetenceManagerImplementation();

	private Group group;
	private Competence competence;
	private AchievementType achievementType;
	private int idMock = 1;
	private long idMockLong = 1;
	private String uuIdMock = "8a3e8480-d2d5-4b49-9c49-0ace2b718441";
	private List<Group> listGroups = new ArrayList<>(idMock);
	private List<Competence> listCompetences = new ArrayList<>();
	private List<AchievementType> listAchievementTypes = new ArrayList<>();
	private Set<Competence> setCompetences = new HashSet<>();

	@Before
	public void setUp() throws Exception {
		competence = new Competence();
		listGroups.add(group);
		listCompetences.add(competence);
		listAchievementTypes.add(achievementType);
		setCompetences.add(competence);
	}

	@Test
	public void testGetGroups() {
		when(competenceDao.showGroups(idMock)).thenReturn(listGroups);
		List<Group> listActual = competenceManager.findGroups(idMock);
		verify(competenceDao).showGroups(idMock);
		assertEquals(listGroups, listActual);
	}

	@Test
	public void testFindGroupsByCompetenceUuid() {
		when(competenceDao.findGroupsByCompetenceUuid(uuIdMock)).thenReturn(listGroups);
		List<Group> listActual = competenceManager.findGroupsByCompetenceUuid(uuIdMock);
		verify(competenceDao).findGroupsByCompetenceUuid(uuIdMock);
		assertEquals(listGroups, listActual);
	}

	@Test
	public void testList() {
		when(competenceDao.listWithUsers()).thenReturn(listCompetences);
		List<Competence> listActual = competenceManager.findAllCompetences();
		verify(competenceDao).listWithUsers();
		assertEquals(listCompetences, listActual);
	}

	@Test
	public void testGetTypesOfAchievements() {
		when(achievementTypeDao.findByCompetenceId(idMockLong)).thenReturn(listAchievementTypes);
		List<AchievementType> listActual = competenceManager.findTypesOfAchievements(idMockLong);
		verify(achievementTypeDao).findByCompetenceId(idMockLong);
		assertEquals(listAchievementTypes, listActual);
	}

	@Test
	public void testCreateEquals() throws CompetenceManagerException {
		Competence competenceExpected  = new Competence(); 
		competenceExpected.setName("Java");
		competence = competenceManager.create("Java");
		assertEquals(competenceExpected, competence);
	}
	
	@Test
	public void testCreateNotSame() throws CompetenceManagerException {
		Competence competenceExpected  = new Competence(); 
		competenceExpected.setName("Android");
		competence = competenceManager.create("Java");
		assertNotSame(competenceExpected, competence);
	}

	@Test(expected=CompetenceManagerException.class)
	public void testDeleteByLong() throws CompetenceManagerException {
		when(competenceDao.findById(Competence.class, idMockLong)).thenReturn(competence);
		boolean deleted = competenceManager.delete(idMockLong);
	}

	@Test(expected=CompetenceManagerException.class)
	public void testDeleteByUuidNull() throws CompetenceManagerException {
		competenceManager.deleteByUuid((String) null);
	}
	
	@Test(expected=CompetenceManagerException.class)
	public void testDeleteByUuid() throws CompetenceManagerException {
		when(competenceDao.findByUuid(Competence.class, uuIdMock)).thenReturn(competence);
		competenceManager.deleteByUuid(uuIdMock);
	}

	@Ignore
	@Test
	public void testListWithout() {

		when(setCompetences.addAll(listCompetences)).thenReturn(true);
		listCompetences.add(competence);
		competenceManager.listWithout(listCompetences);

	}

	@Test
	public void testFindByUser() {
		when(competenceDao.findByUser(idMockLong)).thenReturn(listCompetences);
		List<Competence> expected = competenceManager.findByUser(idMockLong);
		assertEquals(expected, listCompetences);
	}

	@Test
	public void testFindByUserUuidEquals() {
		when(competenceDao.findByUserUuid(uuIdMock)).thenReturn(listCompetences);
		List<Competence> expected = competenceManager.findByUserUuid(uuIdMock);
		assertEquals(expected, listCompetences);
	}

	@Test
	public void testFindByUserUuidNotNull() {
		when(competenceDao.findByUserUuid(uuIdMock)).thenReturn(listCompetences);
		List<Competence> expected = competenceManager.findByUserUuid(uuIdMock);
		assertNotNull(expected);
	}

	@Test
	public void testGetByIDNotNull() {
		when(competenceDao.findById(Competence.class, idMockLong)).thenReturn(competence);
		competenceManager.findByID(idMockLong);
		assertNotNull(competenceManager.findByID(idMockLong));
	}

	@Test
	public void testGetByIDEquals() {
		when(competenceDao.findById(Competence.class, idMockLong)).thenReturn(competence);
		Competence actual = competenceManager.findByID(idMockLong);
		assertEquals(competence, actual);
	}
	
	@Test
	public void testGetAchievementTypesByCompetenceUuidEquals() {
		when(achievementTypeDao.findByCompetenceUuid(uuIdMock)).thenReturn(listAchievementTypes);
		List<AchievementType> expected = competenceManager.findAchievementTypesByCompetenceUuid(uuIdMock);
		assertEquals(listAchievementTypes, expected);
	}

	@Test
	public void testGetAchievementTypesByCompetenceUuidNotNull() {
		when(achievementTypeDao.findByCompetenceUuid(uuIdMock)).thenReturn(listAchievementTypes);
		List<AchievementType> expected = competenceManager.findAchievementTypesByCompetenceUuid(uuIdMock);
		assertNotNull(expected);
	}
}
