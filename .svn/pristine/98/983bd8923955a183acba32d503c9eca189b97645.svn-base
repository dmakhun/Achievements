package com.softserve.edu.controller;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.softserve.edu.entity.Achievement;
import com.softserve.edu.entity.Competence;
import com.softserve.edu.entity.Group;
import com.softserve.edu.entity.User;
import com.softserve.edu.exception.InvalidValueException;
import com.softserve.edu.exception.UserManagerException;
import com.softserve.edu.manager.AchievementManager;
import com.softserve.edu.manager.CompetenceManager;
import com.softserve.edu.manager.RoleManager;
import com.softserve.edu.manager.UserManager;

@Controller
public class UserController {
	@Autowired
	UserManager userManager;
	@Autowired
	CompetenceManager competenceManager;
	@Autowired
	AchievementManager achievementManager;
	@Autowired
	RoleManager roleManager;

	@RequestMapping(value = "/userHome", method = RequestMethod.GET)
	public String userHome(Model model, Principal pr) {
		Authentication auth = SecurityContextHolder.getContext()
				.getAuthentication();

		User user = userManager.findByUsername(auth.getName());

		List<Group> groups = userManager.findGroups(user.getId(), false);
		model.addAttribute("groups", groups);
		List<Achievement> achievements = achievementManager.userAchievements(user
				.getId());

		model.addAttribute("achievements", achievements);
		
		List<Group> list = userManager.findGroups(
				userManager.findByUsername(auth.getName()).getId(), true);
		List<Competence> buts = new ArrayList<>();
		List<Competence> wantToAttend = competenceManager
				.findByUser(userManager.findByUsername(auth.getName()).getId());

		for (Group group : list) {
			buts.add(group.getCompetence());
		}
		buts.addAll(wantToAttend);

		List<Competence> competences = competenceManager.listWithout(buts);

		model.addAttribute("competences", competences);
		model.addAttribute("waiting_attend", wantToAttend);
		
		return "userHome";
	}

	@RequestMapping(value = "/userHome", method = RequestMethod.POST)
	public String attend(
			@RequestParam(value = "competence", required = true) Long competenceId,
			Principal pr) {
		Authentication auth = SecurityContextHolder.getContext()
				.getAuthentication();

		try {
			userManager.attendCompetence(userManager.findByUsername(auth.getName())
					.getId(), competenceId);
		} catch (UserManagerException e) {
			return "errorPage";
		}

		return "redirect:/user/userHome";
	}

	@RequestMapping(value = "/admin/removeManager", method = RequestMethod.POST)
	public String removeManagerFromList(
			Model model,
			@RequestParam(value = "userlist", required = false, defaultValue = "") Long userId) {
		try {
			userManager.deleteById(userId);
		} catch (UserManagerException e) {
			return "errorPage";
		}
		return "redirect:/admin/removeManager?status=success";
	}

	

	@RequestMapping(value = "/admin/addManager", method = RequestMethod.POST)
	public String addManagerPost(
			@RequestParam(value = "username") String userName,
			@RequestParam(value = "password") String password,
			@RequestParam(value = "surname") String surname,
			@RequestParam(value = "e-mail") String mail, Model model) {

		try {
			userManager.create(userName, surname, userName, password, mail,
					roleManager.findRole("ROLE_MANAGER"));
		} catch (Exception e) {
			
			return "redirect:/admin/addManager";
		}
		return "redirect:/admin/addManager?status=success";
	}

	@RequestMapping(value = "/admin/allManagers", method = RequestMethod.GET)
	public String allManagers(
			@RequestParam(value = "status", defaultValue = "", required = false) String status,
			Model model) {
		List<User> allUsers = userManager.findAllUsers();
		List<User> managers = new ArrayList<User>();

		for (User user : allUsers) {
			if (user.getRole().getName().equals("ROLE_MANAGER")) {
				managers.add(user);
			}
		}
		model.addAttribute("userlist", managers);
		model.addAttribute("status", status);

		return "allManagers";
	}

	@RequestMapping(value = "/admin/removeManager/{id}", method = RequestMethod.GET)
	public String removeManagerById(Model model,
			@PathVariable(value = "id") Long userId) {

		try {
			userManager.deleteById(userId);
		} catch (UserManagerException e) {
			return "errorPage";
		}
		return "redirect:/admin/allManagers?status=success";
	}
	
	
	@RequestMapping(value = "/image", method = RequestMethod.GET)
	String dd(Model model) {

		Authentication auth = SecurityContextHolder.getContext()
				.getAuthentication();
		model.addAttribute("username", auth.getName());

		return "image";
	}

	@RequestMapping(value = "/image", method = RequestMethod.POST)
	String uploadFileHandler(@RequestParam("file") MultipartFile file,
			Model model) throws IOException {

		Authentication auth = SecurityContextHolder.getContext()
				.getAuthentication();

		byte[] imageInByte = file.getBytes();
		User user = userManager.findByUsername(auth.getName());
		user.setPicture(imageInByte);
		try {
			userManager.update(user);
		} catch (UserManagerException e) {
			return "errorPage";
		}

		return "redirect:/image";
	}

	@RequestMapping(value = "/showImage/{username}")
	public ResponseEntity<byte[]> showImage(
			@PathVariable(value = "username") String username) throws IOException {
		User user = userManager.findByUsername(username);
		byte[] image = null;
		if (user != null && user.getPicture() != null) {
			image = user.getPicture();
		} else {
			URL url = Thread.currentThread().getContextClassLoader()
					.getResource("/defaultPicture.png");
			File file = new File(url.getPath().replaceAll("%20", " "));
			image = Files.readAllBytes(file.toPath());
		}
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.IMAGE_PNG);
		return new ResponseEntity<byte[]>(image, headers,
				HttpStatus.OK);
	}	

	@RequestMapping(value = "/userprofile")
	public String userProfile(Model model, Principal principal) {
		User user = userManager.findByUsername(principal.getName());

		model.addAttribute("name", user.getName());
		model.addAttribute("email", user.getEmail());
		model.addAttribute("surname", user.getSurname());
		model.addAttribute("username", user.getUsername());
		return "mainProfile";
	}

	@RequestMapping(value = "/editprofile")
	public String userProfile(
			@RequestParam(value = "firstname", required = false, defaultValue = "") String firstname,
			@RequestParam(value = "surname", required = false, defaultValue = "") String surname,
			@RequestParam(value = "mailbox", required = false, defaultValue = "") String mailbox,
			Model model, Principal principal) {

		User user = userManager.findByUsername(principal.getName());

		model.addAttribute("name", user.getName());
		model.addAttribute("email", user.getEmail());
		model.addAttribute("surname", user.getSurname());
		model.addAttribute("username", user.getUsername());

		long id = user.getId();
		try {
			userManager.update(id, firstname, surname, null, null, mailbox,
					null);
		} catch (Exception e) {
			model.addAttribute("mess", e.getMessage());
		}

		return "userProfile";
	}
	@RequestMapping(value = "/passwordchanging", method = RequestMethod.GET)
	public String passwordChan(Principal principal, @RequestParam(value = "password", required = false, defaultValue = "") String password)
	{
		User user = userManager.findByUsername(principal.getName());
		try {
			userManager.update(user.getId(), null, null, null, user.getPassword(), null, null);
		} catch (Exception e) {
			
			return "errorPage";
		}
		return "passwordchanging";
	}

	@RequestMapping(value = "/passwordchanging", method = RequestMethod.POST)
	public String passwordChanger(
			@RequestParam(value = "oldPassword", required = false, defaultValue = "") String oldPassword,
			@RequestParam(value = "confirmPassword", required = false, defaultValue = "") String confirmPassword,
			@RequestParam(value = "newPassword", required = false, defaultValue = "") String newPassword,
			Principal principal, Model model) {

		User user = userManager.findByUsername(principal.getName());
		long id = user.getId();

		if (oldPassword.equals(user.getPassword())
				&& confirmPassword.equals(oldPassword)) {
			try {
				userManager.update(id, null, null, null, newPassword, null,
						null);
			} catch (Exception e) {
				model.addAttribute("mess", e.getMessage());
			}
		}

		return "passwordChanging";
	}


}
	
