package com.softserve.edu.dao;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.softserve.edu.util.HibernateHelper;

public class GenericDaoImplementation<T> implements GenericDao<T> {

    private Class<T> objectClass;

    /**
     * This is the place where generic magically becomes a concrete object, in
     * some cases.
     * 
     * @param objectClass
     *            Class type, that will be returned in some cases.
     */
    public GenericDaoImplementation(Class<T> objectClass) {
        this.objectClass = objectClass;
    }

    /**
     * {@inheritDoc}
     */
    public boolean save(T item) {
        Session session = HibernateHelper.getSessionFactory().openSession();
        Transaction transaction = null;
        boolean status = false;

        try {
            transaction = session.beginTransaction();
            session.save(item);
            transaction.commit();
            status = true;
        } catch (Exception ex) {
            transaction.rollback();
        } finally {
            session.close();
        }

        return status;
    }

    /**
     * {@inheritDoc}
     */
    public boolean update(T item) {
        Session session = HibernateHelper.getSessionFactory().openSession();
        Transaction transaction = null;
        boolean status = false;

        try {
            transaction = session.beginTransaction();
            session.update(item);
            transaction.commit();
            status = true;
        } catch (Exception e) {
            transaction.rollback();
        } finally {
            session.close();
        }

        return status;
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
	public T getByID(Long id) {
        Session session = HibernateHelper.getSessionFactory().openSession();
        Transaction transaction = null;
        T obj = null;

        try {
            transaction = session.beginTransaction();
            obj = (T) session.get(objectClass, id);
            transaction.commit();
        } catch (Exception e) {
            transaction.rollback();
        } finally {
            session.close();
        }

        return obj;

    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
	public List<T> getAll() {
        Session session = HibernateHelper.getSessionFactory().openSession();
        Transaction transaction = null;
        List<T> itemList = new ArrayList<T>();

        try {
            transaction = session.beginTransaction();
            itemList = session.createCriteria(objectClass).list();
            transaction.commit();
        } catch (Exception e) {
            transaction.rollback();
        } finally {
            session.close();
        }
        return itemList;
    }

    /**
     * {@inheritDoc}
     */
    public boolean delete(T item) {
        Session session = HibernateHelper.getSessionFactory().openSession();
        Transaction transaction = null;
        boolean status = false;

        try {
            transaction = session.beginTransaction();
            session.delete(item);
            transaction.commit();
            status = true;
        } catch (Exception e) {
            transaction.rollback();
        } finally {
            session.close();
        }

        return status;
    }

}
