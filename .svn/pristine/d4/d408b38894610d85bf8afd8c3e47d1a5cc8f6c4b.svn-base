package com.softserve.edu.rest;

import java.util.List;

import javax.persistence.NoResultException;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.softserve.edu.entity.Group;
import com.softserve.edu.entity.User;
import com.softserve.edu.exception.InvalidValueException;
import com.softserve.edu.manager.UserManager;

@Component
@Path("/user")
public class UserRest {
	@Autowired
	private UserManager userManager;

	/*
	 * find all users from database. find by rest/user/allusers. listOfUsers is
	 * wrapped by special JaxbList object. Method produces xml file.
	 */
	@GET
	@Produces(MediaType.APPLICATION_XML)
	@Path("/allusers")
	public Response getListOfAllUsers() {

		List<User> list = userManager.list();
		JaxbList<User> listOfUsers = new JaxbList<User>(list);
		return Response.ok(listOfUsers).build();
	}

	/*
	 * find user by user uuid. find by rest/user/getuserbyuuid/{uuid}. Method
	 * produces xml file.
	 */
	@GET
	@Produces(MediaType.APPLICATION_XML)
	@Path("/getuserbyuuid/{uuid}")
	public Response getUserByUserUuid(@PathParam("uuid") String uuid) {
		User user = null;
		try {
			user = userManager.findByUuid(uuid);
		} catch (IllegalArgumentException e) {
			System.out.println(e);
			return Response.ok(user).status(400)
					.entity("User with such uuid does not exist").build();
		}
		return Response.ok(user).status(200).build();
	}

	/*
	 * find user by user email. find by rest/user/getuserbyemail/{email}. Method
	 * produces xml file.
	 */
	@GET
	@Produces(MediaType.APPLICATION_XML)
	@Path("/getuserbyemail/{email}")
	public Response getUserByemail(@PathParam("email") String email) {
		User user = null;
		try {
			user = userManager.findByEmail(email);
		} catch (IllegalArgumentException e) {
			System.out.println(e);
			return Response.ok(user).status(400)
					.entity("User with such email does not exist").build();
		}
		return Response.ok(user).status(200).build();
	}

	/*
	 * find all actual (non-closed to current date) user's groups if
	 * switcher=true. otherwise find all user's groups (include groups, closed
	 * to current date). find by rest/user/getgroups/{username}/{switcher}.
	 * {switcher} - boolean true or false. groupList is wrapped by special
	 * JaxbList object. Method produces xml file.
	 */
	@GET
	@Produces(MediaType.APPLICATION_XML)
	@Path("/getgroups/{username}/{switcher}")
	public Response getGroupsByUserName(@PathParam("username") String username,
			@PathParam("switcher") boolean switcher) {

		User user = null;
		try {
			user = userManager.findByUsername(username);
		} catch (IllegalArgumentException e) {
			System.out.println(e);
			return Response.status(400)
					.entity("User with such user name does not exist").build();
		}
		List<Group> list = null;
		try {
			list = userManager.findGroups(user.getId(), switcher);
		} catch (IllegalArgumentException e) {
			System.out.println(e);
			return Response.status(400).entity("This user has no one group")
					.build();
		}
		JaxbList<Group> groupList = new JaxbList<Group>(list);
		return Response.ok(groupList).build();
	}

	/*
	 * find user by username. find by rest/user/getuserbyusername/{username}.
	 * Method produces xml file.
	 */
	@GET
	@Produces(MediaType.APPLICATION_XML)
	@Path("/getuserbyusername/{username}")
	public Response getUsersByUsername(@PathParam("username") String username) {
		User user = null;
		try {
			user = userManager.findByUsername(username);
		} catch (IllegalArgumentException e) {
			System.out.println(e);
			return Response.ok(user).status(400)
					.entity("User with such username does not exist").build();
		}
		return Response.ok(user).status(200).build();

	}

	/*
	 * delete user by user's uuid. find by
	 * rest/user/deleteuserbyuseruuid/{useruuid}.
	 */
	@DELETE
	@Path("/deleteuserbyuseruuid/{useruuid}")
	public Response deleteUserByUserUuid(@PathParam("useruuid") String userUuid) {

		try {
			userManager.deleteByUuid(userUuid);
		} catch (IllegalArgumentException e) {
			System.out.println(e);
			return Response.status(400).entity("user does not exist").build();
		}

		return Response.status(200).entity("User was removed").build();
	}

	/*
	 * create user (save in database). Consumes application/xml file, validate
	 * fields and save in database. return response status 201 if user creation
	 * process was successful, otherwise return 400 response status.
	 */
	@POST
	@Path("/createuser")
	@Consumes(MediaType.APPLICATION_XML)
	public Response createUser(User user) {
		try {
			userManager.create(user.getName(), user.getSurname(),
					user.getUsername(), user.getPassword(), user.getEmail(),
					user.getRole().getUuid());
		} catch (InvalidValueException e) {
			e.printStackTrace();
			return Response.status(400).entity("User was not created.").build();
		}
		return Response.status(201).entity("User was created!").build();
	}

	/*
	 * update user with appropriate uuid. Consumes application/xml file, find
	 * appropriate user by user uuid, validate fields from consumed xml file and
	 * update user in database if validation process was successful. return
	 * response status 200 if update process was successful, otherwise return
	 * 400 response status.
	 */
	@PUT
	@Path("/updateuser/{uuid}")
	@Consumes(MediaType.APPLICATION_XML)
	public Response updateUser(@PathParam("uuid") String UserUuid, User user) {
		try {
			userManager.update(UserUuid, user.getName(),
					user.getSurname(), user.getUsername(), user.getPassword(),
					user.getEmail(), user.getUuid());
		} catch (InvalidValueException e) {
			e.printStackTrace();
			return Response.status(400).entity("User was not updated.").build();
		}
		return Response.status(200).build();
	}

	/*
	 * attend competence with appropriate competence uuid to user with
	 * appropriate uuid. find user and competence by uuid. return response
	 * status 200 if attending process was successful.
	 */
	@PUT
	@Path("/attendcompetence/{useruuid}/{competenceuuid}")
	public Response attendCompetence(@PathParam("useruuid") String userUuid,
			@PathParam("competenceuuid") String competenceUuid) {
		try{
			userManager.attendCompetence(userUuid, competenceUuid);
		}catch(NoResultException e){
			return Response.status(400).entity("User or competence did not exist.").build();
		}
		
		return Response.status(200).build();
	}
}
