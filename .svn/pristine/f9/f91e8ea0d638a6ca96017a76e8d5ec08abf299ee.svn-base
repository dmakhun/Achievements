package com.softserve.edu.dao;

import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.softserve.edu.entity.AchievementType;
import com.softserve.edu.entity.User;

@Repository("achievementTypeDao")
public class AchievementTypeDaoImplementation extends
		GenericDaoImplementation<AchievementType> implements AchievementTypeDao {

	@Autowired
	UserDao userDao;
	@Override
	public List<AchievementType> list(Long idCompetence) {
		return this.findEntityList(AchievementType.GET_LIST_ACHIEVEMENT_TYPE, idCompetence);
	}

	
	@Override
	public List<AchievementType> findAchievementTypesByCompetenceUuid(
			String conpetenceUuid) {
		
		return this.findEntityList(AchievementType.GET_ACHIEVEMENT_TYPES_BY_COMPETENCE_ID, conpetenceUuid);

	}
	@Override
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public List<AchievementType> dynamicSearch(String name, int startPosition,
			int maxResult) {
		
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<AchievementType> criteriaQuery = criteriaBuilder
				.createQuery(AchievementType.class);
		Root<AchievementType> root = criteriaQuery.from(AchievementType.class);
		criteriaQuery.select(root);
		criteriaQuery.where(criteriaBuilder.like(root.<String> get("name"),
				name + "%"));
		TypedQuery typedQuery = entityManager.createQuery(criteriaQuery);
		typedQuery.setFirstResult(startPosition);
		typedQuery.setMaxResults(maxResult);
		List<AchievementType> achievementTypes = typedQuery.getResultList();
		return achievementTypes;
		
	}

	@Override
	public void deleteByUuid(String uuid) {
		userDao.delete(userDao.findByUuid(User.class, uuid));
	}
}
