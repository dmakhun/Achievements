package com.softserve.edu.controller;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.softserve.edu.entity.Competence;
import com.softserve.edu.entity.Group;
import com.softserve.edu.entity.User;
import com.softserve.edu.exception.InvalidValueException;
import com.softserve.edu.manager.CompetenceManager;
import com.softserve.edu.manager.GroupManager;
import com.softserve.edu.manager.RoleManager;
import com.softserve.edu.manager.UserManager;

/**
 * Handles requests for the application home page.
 */
@Controller
public class LoginController {
	@Autowired
	UserManager userManager;
	@Autowired
	CompetenceManager competenceManager;
	@Autowired
	GroupManager groupManager;
	@Autowired
	RoleManager roleManager;
	private static final Logger logger = LoggerFactory
			.getLogger(LoginController.class);

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(ModelMap model, Principal pr) {
		Authentication auth = SecurityContextHolder.getContext()
				.getAuthentication();

		// model.addAttribute("role", auth.getAuthorities().toString());
		// model.addAttribute("role", auth.getName().toString());

		List<Competence> competences = competenceManager.list();
		model.addAttribute("competences", competences);

		List<List<Group>> groupLists = new ArrayList<>();
		for (Competence competence : competences) {
			groupLists.add(groupManager.inFuture(competence.getId()));
		}
		if (auth.getAuthorities().toString().contains("ROLE_USER")) {
			return "redirect:/userHome";
		}
		model.addAttribute("groups_lists", groupLists);

		return "index";
	}

	@RequestMapping(value = "/passwordchanging")
	public String passwordChanging() {

		return "passwordChanging";
	}

	@RequestMapping(value = "/login")
	public String signIn(
			@RequestParam(value = "error", required = false, defaultValue = "") String error,
			Model model) {

		model.addAttribute("error", error);

		return "login";
	}

	@RequestMapping(value = "/registration")
	public String registration(Model model) {
		model.addAttribute("user", new User());
		return "registration";
	}

	@RequestMapping(value = "/userprofile")
	public String userProfile(
			@RequestParam(value = "firstname", required = false, defaultValue = "") String firstname,
			@RequestParam(value = "surname", required = false, defaultValue = "") String surname,
			@RequestParam(value = "mailbox", required = false, defaultValue = "") String mailbox,
			Model model, Principal principal) {

		User user = userManager.findByUsername(principal.getName());
		long id = user.getId();
		try {
			userManager.update(id, firstname, surname, null, null, mailbox,
					null);
		} catch (InvalidValueException e) {
			model.addAttribute("mess", e.getMessage());
		}

		return "userProfile";
	}

	@RequestMapping(value = "/createaccount")
	public String createaccount(@Valid User user, BindingResult result,
			Model model) {

		boolean email    = userManager.existEmail(user.getEmail());
		boolean username = userManager.existUserName(user.getUsername());

		if (email || username || result.hasErrors()) {
			if (email) {
				result.rejectValue("email", "DuplicateKey.user.email");
			}
			if (username) {
				result.rejectValue("username", "DuplicateKey.user.username");
			}
			return "registration";
		}

		else {
		
			try {
				Long id = roleManager.findRole("ROLE_USER");
				user.setRole(roleManager.getById(id));
				userManager.create(user);
				String userNameSurname = user.getName() + " " + user.getSurname();

				model.addAttribute("userNameSurname", userNameSurname);

				return "login";
			} catch (Throwable e) {

				return "redirect:/myerror/20"; // ?????????????
			}
		}

	}

	@RequestMapping(value = "/logout")
	public String logout(ModelMap model) {

		return "login";

	}

	@RequestMapping(value = "/sheduleTable", method = RequestMethod.GET)
	public String sheduleTable() {
		return "sheduleTable";
	}

	@RequestMapping(value = "/passwordchanging", method = RequestMethod.POST)
	public String passwordChanger(
			@RequestParam(value = "oldPassword", required = false, defaultValue = "") String oldPassword,
			@RequestParam(value = "confirmPassword", required = false, defaultValue = "") String confirmPassword,
			@RequestParam(value = "newPassword", required = false, defaultValue = "") String newPassword,
			Principal principal, Model model) {

		User user = userManager.findByUsername(principal.getName());
		long id = user.getId();

		if (oldPassword.equals(user.getPassword())
				&& confirmPassword.equals(oldPassword)) {
			try {
				userManager.update(id, null, null, null, newPassword, null,
						null);
			} catch (InvalidValueException e) {
				model.addAttribute("mess", e.getMessage());
			}
		}

		return "passwordChanging";
	}

	@RequestMapping(value = "recovery")
	public String passwordRecovery() {

		return "recovery";
	}

}
