package com.softserve.edu.manager;

import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;

import com.softserve.edu.entity.User;
import com.softserve.edu.exception.InvalidValueException;

public class UserManagerImplTest {

    @Before
    public void setUp() throws Exception {
    }

	UserManager userManager = new UserManagerImplementation();
    
	/**
	 * Lots of versions that method of adding user can take.
	 */
	@Test
	public void createTest1()
			throws InvalidValueException {
		userManager.create(null, null, null, null, null, null);
		fail("Empty strings should not pass here. Fix that.");
	}
	
    @Test
	public void createTest2() throws InvalidValueException {
		userManager
		        .create("slfkjdslkfjdslkfjsdlkfjsldkjflsdkjflsdkjflsdkjfldskjflsdkjfsldkjflsdk",
		                "", "", "", "", null);
		fail("Last time max length was 50 chars. Old test?");
	}
    
    @Test
	public void createTest3() throws InvalidValueException {
		userManager.create("", "", "", "", "", null);
		fail("Can be only one null");
	}

	@Test
	public void createTest4() throws InvalidValueException {
		userManager.create("Name", "Surname", "u", "password", "email", null);
		fail("Username should fail here, not enough length");
	}

	@Test
	public void createTest5() throws InvalidValueException {
		userManager.create("Name", "Surname", "u$$ern3m#", "password",
		        "email", null);
		fail("Username should fail here. Forbidden characters");
	}

	@Test
	public void createTest6() throws InvalidValueException {
		userManager.create("Name", "Surname", "someUserName", "password",
		        "email", null);
		fail("email check should fail here. not an email pattern");
	}

	@Test
	public void createTest7() throws InvalidValueException {
		userManager.create("Name", "Surname", "someUserName", "password",
		        "email@email", null);
		fail("that's a bad email pattern too, fix");
	}

	@Test
    public void createTest8() throws InvalidValueException {
		userManager.create("Name", "Surname", "someUserName", "password",
		        "email@email.email", -3l);
		fail("Role id should fail as nonexistent");
	}
	
	/**
     * Lots of versions that method of user modifying can take.
     */
    
	User testUserOne = null;
	User testUserTwo = null;
	
	@Test
	public void testModify1() throws InvalidValueException {
		testUserOne = userManager.create("Name", "Surname", "TestoniniOne",
		        "pass", "e@mail.com", null);
		testUserTwo = userManager.create("Name", "Surname", "TestoniniTwo",
		        "pass", "e2@mail.com", null);
		fail("Could not add testing users");
	}

	@Test
	public void testModify2() throws InvalidValueException {
		userManager.update(testUserOne.getId(), "", "", "", "", "", null);
		fail("Yep, that should be a valid test and it failed.");
	}

	@Test
	public void testModify3() throws InvalidValueException {
		userManager
		        .update(testUserOne.getId(),
		                "sldfjsdlkfjsdl;fkjsdfdsfsfsdsda;lfkjsd;flkjsd;lfkjds;lfkjsda;lfkjsd;lfkj",
		                "", "", "", "", null);
		fail("Test should fail because of name length.");
	}

	@Test
	public void testModify4() throws InvalidValueException {
		userManager.update(testUserOne.getId(), "name", "surname",
		        "TestoniniOne", "", "", null);
		fail("Such input should not fail because nothing changed.");
	}

	@Test
	public void testModify5() throws InvalidValueException {
		userManager.update(testUserOne.getId(), "name", "surname",
		        "TestoniniTwo", "", "", null);
		fail("Test should fail because of duplicate username.");
	}

	@Test
	public void testModify6() throws InvalidValueException {
		userManager.update(testUserOne.getId(), "name", "surname", "", "",
		        "e2@mail.com", null);
		fail("Test should fail because of duplicate email.");
	}

	@Test
    public void testAuthorize() {
        UserManager userManager = new UserManagerImplementation();

        User testUserOne = null;
        try {
            testUserOne = userManager.create("Name", "Surname", "TestoniniOne",
                    "pass", "e@mail.com", null);
        } catch (InvalidValueException e) {
        }

        User auth = userManager.authorize(testUserOne.getId(),
                testUserOne.getPassword());
        
        if (auth.getId() != testUserOne.getId()) {
            fail("Authorization failed.");
        }
        
        auth = userManager.authorize(testUserOne.getId(), "nonexistent hash");
        if (auth != null) {
            fail("false authorization");
        }
    }
}
