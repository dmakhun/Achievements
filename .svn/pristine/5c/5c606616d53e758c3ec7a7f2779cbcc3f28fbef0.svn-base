package com.softserve.edu.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;

import com.softserve.edu.entity.User;

@Repository
public class GenericDaoImplementation<T> implements GenericDao<T> {

	private Class<T> objectClass;

	/**
	 * This is the place where generic magically becomes a concrete object, in
	 * some cases.
	 * 
	 * @param objectClass
	 *            Class type, that will be returned in some cases.
	 */
	public GenericDaoImplementation(Class<T> objectClass) {
		this.objectClass = objectClass;
	}

	public GenericDaoImplementation() {

	}

	@PersistenceContext
	EntityManager entityManager;

	/**
	 * {@inheritDoc}
	 */

	public boolean save(T item) {
		boolean status = false;
		entityManager.persist(item);
		status = true;
		return status;
	}

	/**
	 * {@inheritDoc}
	 */

	public boolean update(T item) {
		boolean status = false;
		entityManager.merge(item);
		status = true;

		return status;
	}

	/**
	 * {@inheritDoc}
	 */

	public T getByID(Long id) {

		return entityManager.find(objectClass, id);

	}

	/**
	 * {@inheritDoc}
	 * 
	 */
	@SuppressWarnings("unchecked")
	@Override
	public T getByUuid(String uuid) {

		try {
			if (uuid == null || uuid.isEmpty()) {
				return null;
			}

			T t = (T) entityManager
					.createQuery(
							"from " + objectClass.getSimpleName()
									+ " where uuid like :uuid")
					.setParameter("uuid", uuid).getSingleResult();

			return t;
		} catch (NoResultException e) {
			return null;
		}
	}

	/**
	 * {@inheritDoc}
	 */

	@SuppressWarnings("unchecked")
	public List<T> getAll() {
		return entityManager.createQuery("from " + objectClass.getName())
				.getResultList();
	}

	/**
	 * {@inheritDoc}
	 */

	public boolean delete(T item) {
		boolean status = false;
		T eT = entityManager.merge(item);
		entityManager.remove(eT);
		status = true;
		return status;
	}
	
	/**
	 * {@inheritDoc}
	 */
	
	public List<T> dynamicSearchTwoCriterias(int startPosition,
			int maxResult, String parameter1, String resultString,
			boolean findCriteria, Long resultLong, String parameter2) {
		String additionFind = "";
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<T> criteriaQuery = criteriaBuilder
				.createQuery(objectClass);
		Root<T> root = criteriaQuery.from(objectClass);

		criteriaQuery.select(root);

		if (findCriteria == false) {
			additionFind = "%";
		}
		criteriaQuery.where(criteriaBuilder.like(root.<String> get(parameter1),
				additionFind + resultString + "%"));
		if (resultLong != null) {
			criteriaQuery.where(criteriaBuilder.like(
					root.<String> get(parameter1), additionFind + resultString
							+ "%"), criteriaBuilder.equal(root.get(parameter2),
					resultLong));
		}
		TypedQuery typedQuery = entityManager.createQuery(criteriaQuery);
		typedQuery.setFirstResult(startPosition);
		typedQuery.setMaxResults(maxResult);
		List<T> resultList = typedQuery.getResultList();
		return resultList;
	}

	/**
	 * {@inheritDoc}
	 */
	public Integer count() {

		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<Long> criteriaQuery = criteriaBuilder
				.createQuery(Long.class);
		criteriaQuery.multiselect(criteriaBuilder.count(criteriaQuery
				.from(objectClass)));
		TypedQuery<Long> countQuery = entityManager.createQuery(criteriaQuery);
		int totalObjectsNumber = countQuery.getSingleResult().intValue();

		return totalObjectsNumber;
	}

}
