package com.softserve.edu.dao;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.NoResultException;

import org.springframework.stereotype.Repository;

import com.softserve.edu.entity.AchievementType;
import com.softserve.edu.entity.Competence;
import com.softserve.edu.entity.Group;
import com.softserve.edu.entity.Right;
import com.softserve.edu.entity.User;

@Repository("userDao")
public class UserDaoImplementation extends GenericDaoImplementation<User>
		implements UserDao {

	public UserDaoImplementation() {
		super(User.class);
		// TODO Auto-generated constructor stub
	}

	/**
	 * {@inheritDoc}
	 */
	public void attendUserToCompetence(Long userId, Long competenceId) {

		User user = (User) entityManager.find(User.class, userId);
		Competence competence = (Competence) entityManager.find(
				Competence.class, competenceId);

		if (competence == null) {
			return;
		}

		user.getCompetences().add(competence);

	}

	
	/**
	 * UUID
	 * {@inheritDoc}
	 */
	public void attendUserToCompetence(String userUuid, String competenceUuid) {

		User user = (User) entityManager.createQuery("from User where uuid like :userUuid")
				.setParameter("userUuid", userUuid).getSingleResult();
		
		Competence competence = (Competence)  entityManager.createQuery("from Competence where uuid like :competenceUuid")
				.setParameter("competenceUuid", competenceUuid).getSingleResult();

		if (competence == null) {
			return;
		}

		user.getCompetences().add(competence);

	}
	/**
	 * {@inheritDoc}
	 */
	public void removeUserToCompetence(final Long userId,
			final Long competenceId) {

		Competence competence = (Competence) entityManager.find(
				Competence.class, competenceId);
		User user = (User) entityManager.find(User.class, userId);
		competence.getUsers().remove(user);

	}

	/*
	 * Get all user's achievements. Author Volodymyr.
	 */
	@SuppressWarnings("unchecked")
	public List<AchievementType> getUserAchievementList(long id) {

		List<AchievementType> achievementList = new ArrayList<AchievementType>();

		achievementList = entityManager
				.createQuery(
						"from AchievementType at INNER JOIN fetch at.achievement a "
								+ "INNER JOIN fetch a.user u WHERE u.id = :userID")
				.setParameter("userID", id).getResultList();

		return achievementList;

	}

	/**
	 * {@inheritDoc}
	 */
	public void addRightToUser(User user, Right right) {
		user.getRights().add(right);
		right.getUsers().add(user);
		update(user);
	}

	// @Override
	// public User getByUuid(String uuid) {
	// try {
	// if (uuid == null || uuid.isEmpty()) {
	// return null;
	// }
	//
	// User user = (User) entityManager
	// .createQuery("from User where uuid like :uuid")
	// .setParameter("uuid", uuid).getSingleResult();
	//
	// return user;
	// } catch (NoResultException e) {
	// return null;
	// }
	// }

	/**
	 * {@inheritDoc}
	 * 
	 * @author vkudrtc
	 */
	@Override
	public User findByUsername(String username) {

		try {
			if (username == null || username.isEmpty()) {
				return null;
			}

			User user = (User) entityManager
					.createQuery("from User where username like :username")
					.setParameter("username", username).getSingleResult();

			return user;
		} catch (NoResultException e) {
			return null;
		}
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @author vkudrtc
	 */
	@Override
	public User findByEmail(String email) {

		try {
			if (email == null || email.isEmpty()) {
				return null;
			}

			User user = (User) entityManager
					.createQuery("from User where email like :email")
					.setParameter("email", email).getSingleResult();

			return user;
		} catch (NoResultException e) {
			return null;
		}
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @author vkudrtc
	 */
	public boolean deleteById(final Long id) {

		boolean status = false;

		entityManager.createQuery("delete from User where id = :id")
				.setParameter("id", id).executeUpdate();

		status = true;

		return status;
	}

	/**
	 * {@inheritDoc}
	 * 
	 */
	public boolean deleteByUsername(final String username) {

		boolean status = false;

		entityManager
				.createQuery("delete from User where username like :username")
				.setParameter("username", username).executeUpdate();

		status = true;

		return status;
	}

	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<Group> findGroups(Long userId, boolean onlyOpened) {

		String closed = "";
		if (onlyOpened) {
			Date date = new Date();
			SimpleDateFormat formatter = new SimpleDateFormat("YYYY-MM-DD");
			closed = "and closed >" + formatter.format(date);
		}
		List<Group> list = entityManager
				.createQuery(
						"from Group g inner join fetch g.users u where u.id = :id "
								+ closed).setParameter("id", userId)
				.getResultList();

		return list;
	}

	@Override
	public void deleteByUuid(String userUuid) {

			entityManager.createQuery("delete from User WHERE uuid like :useruuid")
					.setParameter("useruuid", userUuid).executeUpdate();

			
		}
}
