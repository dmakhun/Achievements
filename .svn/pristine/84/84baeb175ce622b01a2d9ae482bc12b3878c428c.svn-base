package com.softserve.edu.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import com.softserve.edu.entity.Competence;
import com.softserve.edu.entity.Group;
import com.softserve.edu.exception.InvalidValueException;
import com.softserve.edu.manager.CompetenceManager;
import com.softserve.edu.manager.GroupManager;
import com.softserve.edu.manager.UserManager;

@Controller
public class CompetenceController {
	@Autowired
	CompetenceManager competenceManager;
	@Autowired
	UserManager userManager;
	@Autowired
	GroupManager groupManager;

	@RequestMapping(value = "/competence", method = RequestMethod.GET)
	public String groups(Model model) {

		List<Competence> competences = competenceManager.list();
		
		
		model.addAttribute("competences", competences);
		
		
		
		return "competencies/showCompetence";
	}

	@RequestMapping(value = "/addCompetence", method = RequestMethod.GET)
	public String addCompetence(
			@RequestParam(value = "status", defaultValue = "", required = false) String status,
			Model model) {
		List<Competence> competencelist = competenceManager.list();
		model.addAttribute("competencelist", competencelist);
		model.addAttribute("status", status);

		return "competencies/addCompetence";
	}

	@RequestMapping(value = "/addCompetence", method = RequestMethod.POST, params = { "addCompetence" })
	public String addCompetence(
			Model model,
			@RequestParam(value = "competenceName", required = false, defaultValue = "") String name) {

		competenceManager.create(name);

		return "redirect:/admin/competenceAll?statusAdd=success";
	}

	public String addCompetencePost(
			Model model,
			@RequestParam(value = "competenceName", required = false, defaultValue = "") String name) {
		competenceManager.create(name);

		return "redirect:/addCompetence?status=success";
	}

	@RequestMapping(value = "/removeCompetence", method = RequestMethod.GET)
	public String removeCompetence(
			@RequestParam(value = "status", defaultValue = "", required = false) String status,
			Model model) {
		List<Competence> competencelist = competenceManager.list();
		model.addAttribute("competencelist", competencelist);
		model.addAttribute("status", status);

		return "competencies/removeCompetence";
	}

	@RequestMapping(value = "/removeCompetence", method = RequestMethod.POST)
	public String removeCompetencePost(
			Model model,
			@RequestParam(value = "competence", required = false, defaultValue = "") Long cid) {

		competenceManager.delete(cid);
		// System.out.println("competenceName remove: " + name);

		return "redirect:/competencies/removeCompetence?status=success";
	}

	@RequestMapping(value = "/addManagerList", method = RequestMethod.POST)
	public String addManager(
			@RequestParam(value = "userlist", required = false, defaultValue = "") Long userId,
			@RequestParam(value = "rolelist", required = false, defaultValue = "") Long roleId) {
		try {
			userManager.update(userId, null, null, null, null, null, roleId);
		} catch (InvalidValueException e) {
			e.printStackTrace();
			return "redirect:/addManager";
		}

		return "redirect:/competencies/addManager?status=success";
	}

	@RequestMapping(value = "/manager/competence", method = RequestMethod.GET)
	public String getGroups(Model model) {

		List<Competence> list = competenceManager.list();
		model.addAttribute("list", list);
		return "competencies/groupsAndCompetence";
	}

	@RequestMapping(value = "/manager/competence", method = RequestMethod.POST)
	public String getGroupsPost(
			@RequestParam(value = "competence") Long competerceId, Model model) {
		List<Competence> list = competenceManager.list();
		model.addAttribute("list", list);
		List<Group> listGroups = groupManager.findByCompetence(competerceId,
				true);
		model.addAttribute("list_groups", listGroups);
		return "competencies/groupsAndCompetence";
	}

	@RequestMapping(value = "/admin/competenceAll", method = RequestMethod.GET)
	public String getCompetencies(
			Model model,
			@RequestParam(value = "statusRemove", required = false, defaultValue = "") String statusRemove,
			@RequestParam(value = "statusAdd", required = false, defaultValue = "") String statusAdd) {
		List<Competence> competencelist = competenceManager.list();
		model.addAttribute("statusRemove", statusRemove);
		model.addAttribute("statusAdd", statusAdd);
		model.addAttribute("competencelist", competencelist);

		return "competencies/forDeleteOrAddCompetence";
	}

	@RequestMapping(value = "/admin/removeCompetence/{id}", method = RequestMethod.GET)
	public String removeCompetenceById(
			@PathVariable(value = "id") Long competenceId) {
		competenceManager.delete(competenceId);
		return "redirect:/admin/competenceAll?statusRemove=success";
	}
}
